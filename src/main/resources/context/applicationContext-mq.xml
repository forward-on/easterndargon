<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/rabbit
     http://www.springframework.org/schema/rabbit/spring-rabbit-1.2.xsd">

    <!--消息队列的使用过程大概如下：
    　　（1）客户端连接到消息队列服务器，打开一个channel。
    　　（2）客户端声明一个exchange，并设置相关属性。
    　　（3）客户端声明一个queue，并设置相关属性。
    　　（4）客户端使用routing key，在exchange和queue之间建立好绑定关系。
    　　（5）客户端投递消息到exchange。
    exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。-->

        <!--exchange也有几个类型，完全根据key进行投递的叫做Direct交换机，例如，绑定时设置了routing key为”abc”，
        那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。
        对key进行模式匹配后进行投递的叫做Topic交换机，符号”#”匹配一个或多个词，符号”*”匹配正好一个词。
        例如”abc.#”匹配”abc.def.ghi”，”abc.*”只匹配”abc.def”。
        还有一种不需要key的，叫做Fanout交换机，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。-->

        <bean id="jsonMessageConverter" class="org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"/>

        <!--配置connection-factory，指定连接rabbit server参数 -->
        <rabbit:connection-factory id="connectionFactory" virtual-host="${mq.vhost}"
                                   username="${mq.username}" password="${mq.password}" host="${mq.host}" port="${mq.port}"/>
        <!-- <rabbit:connection-factory id="connectionFactory"
             username="test2" password="test2"
            host="123.206.228.200" port="5672" /> -->

        <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
        <rabbit:admin id="connectAdmin" connection-factory="connectionFactory" />

        <!--定义queue -->
        <rabbit:queue name="queueTest" durable="true" auto-delete="false"
                      exclusive="false" declared-by="connectAdmin" />

        <!-- 定义direct exchange，绑定queueTest -->
        <rabbit:direct-exchange name="exchangeTest"
                                durable="true" auto-delete="false" declared-by="connectAdmin">
            <rabbit:bindings>
                <!-- direct模式下，binding只有和生产者中的routingKey完全匹配，才生效。它是单播的模式  -->
                <rabbit:binding queue="queueTest" key="queueTestKey"></rabbit:binding>
            </rabbit:bindings>
        </rabbit:direct-exchange>

        <!--定义rabbit template用于数据的接收和发送 -->
        <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
                         exchange="exchangeTest" />

        <!-- 消息接收者 -->
        <bean id="messageReceiver" class="com.ly.rabbitmq.ConsumerOne"></bean>

        <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
        <rabbit:listener-container
                connection-factory="connectionFactory">
            <rabbit:listener queues="queueTest" ref="messageReceiver" />
        </rabbit:listener-container>

        <!--定义queue -->
        <rabbit:queue name="queueTwo" durable="true"
                      auto-delete="false" exclusive="false" declared-by="connectAdmin" />

        <!-- 定义direct exchange，绑定queueTest -->
        <rabbit:direct-exchange name="exchangeTest"
                                durable="true" auto-delete="false" declared-by="connectAdmin">
            <rabbit:bindings>
                <rabbit:binding queue="queueTwo" key="queueTestTwo"></rabbit:binding>
            </rabbit:bindings>
        </rabbit:direct-exchange>

        <!-- 消息接收者 -->
        <bean id="receiverChris" class="com.ly.rabbitmq.ConsumerTwo"></bean>

        <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
        <rabbit:listener-container
                connection-factory="connectionFactory">
            <rabbit:listener queues="queueTwo" ref="receiverChris" />
        </rabbit:listener-container>

        <!-- 分隔线 -->
        <!--配置connection-factory，指定连接rabbit server参数 -->
        <rabbit:connection-factory id="connectionFactory2" virtual-host="${mq.vhost}"
                                   username="${mq.username}" password="${mq.password}" host="${mq.host}" port="${mq.port}" />

        <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->
        <rabbit:admin id="connectAdmin2" connection-factory="connectionFactory2" />

        <!--定义queue -->
        <rabbit:queue name="queueThree" durable="true"
                      auto-delete="false" exclusive="false" declared-by="connectAdmin2" />

        <!-- 定义direct exchange，绑定queueTest -->
        <rabbit:topic-exchange name="exchangeTest2"
                               durable="true" auto-delete="false" declared-by="connectAdmin2">
            <rabbit:bindings>
                <rabbit:binding queue="queueThree" pattern="shijj.#"></rabbit:binding>
            </rabbit:bindings>
        </rabbit:topic-exchange>

        <!--定义rabbit template用于数据的接收和发送 -->
        <rabbit:template id="amqpTemplate2" connection-factory="connectionFactory2"
                         exchange="exchangeTest2" />

        <!-- 消息接收者 -->
        <bean id="recieverThree" class="com.ly.rabbitmq.ConsumerThree"></bean>

        <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
        <rabbit:listener-container
                connection-factory="connectionFactory2">
            <rabbit:listener queues="queueThree" ref="recieverThree" />
        </rabbit:listener-container>

</beans>